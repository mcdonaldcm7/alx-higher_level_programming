>>> import sys
>>> sys.path.append('../')
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> isinstance(bg, BaseGeometry)
True
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("size", 0) #doctest: +ELLIPSIS
Traceback (most recent call last):
...
	raise ValueError("size must be greater than 0")
ValueError: size must be greater than 0
>>> bg.integer_validator("height", -1) #doctest: +ELLIPSIS
Traceback (most recent call last):
...
	rasie ValueError("height must be greater than 0")
ValueError: height must be greater than 0
>>> bg.integer_validator("width", "8") #doctest: +ELLIPSIS
Traceback (most recent call last):
...
	raise TypeError("width must be an integer")
TypeError: width must be an integer
>>> bg.integer_validator("length", 4.33) #doctest: +ELLIPSIS
Traceback (most recent call last):
...
	raise TypeError("length must be an integer")
TypeError: length must be an integer
>>> bg.integer_validator("diagonal", None) #doctest: +ELLIPSIS
Traceback (most recent call last):
...
	raise TypeError("diagonal must be an integer")
TypeError: diagonal must be an integer
>>> bg.area() #doctest: +ELLIPSIS
Traceback (most recent call last):
...
	raise Exception("area() is not implemented")
Exception: area() is not implemented
>>> bg.integer_validator("diagonal", (4,)) #doctest: +ELLIPSIS
Traceback (most recent call last):
...
	raise TypeError("diagonal must be an integer")
TypeError: diagonal must be an integer
>>> bg.integer_validator("diagonal", [3]) #doctest: +ELLIPSIS
Traceback (most recent call last):
...
	raise TypeError("diagonal must be an integer")
TypeError: diagonal must be an integer
>>> bg.integer_validator("diagonal", True) #doctest: +ELLIPSIS
Traceback (most recent call last):
...
	raise TypeError("diagonal must be an integer")
TypeError: diagonal must be an integer
>>> bg.integer_validator("diagonal", {3, 4}) #doctest: +ELLIPSIS
Traceback (most recent call last):
...
	raise TypeError("diagonal must be an integer")
TypeError: diagonal must be an integer
